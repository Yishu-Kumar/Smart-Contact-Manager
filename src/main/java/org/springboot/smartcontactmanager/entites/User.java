package org.springboot.smartcontactmanager.entites;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.Collection;

@Entity
@Table(name = "User")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //Now, for this table sequence file named as "hibernate_sequence" will not be generated
    //in database to maintain the sequence that is generated by "GenerationType.AUTO" strategy.
    @Column(name = "Id")
    private int id;

    @NotBlank(message = "Name field must required !!")
    @Size(min = 2, max = 25, message = "minimum 2 and maximum 25 characters are allowed !!")
    @Column(name = "Name")
    private String name;

    @Column(name = "Email", unique = true)
    private String email;

    @Size(min = 2, message = "Password must contains more than 2 characters !!")
    @Column(name = "Password")
    private String password;

    @Column(name = "Role")
    private String role;

    @Column(name = "Enabled")
    private boolean enabled;

    @Column(name = "Image_URL")
    private String imageUrl;

    @Column(name = "About", length = 200)
    private String about;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user") //"Contact" class objects will automatically be saved
    //because of use of "CascadeType.ALL" and contact objects will be fetched when we call them according to our requirement
    //and not at same time of fetching of "User" object. New table will not be generated for mapping (named as "user_contacts")
    //because of use of "mappedBy".
    private Collection<Contact> contacts = new ArrayList<>();

    public User() {

    }

    public User(int id, String name, String email, String password, String role, boolean enabled, String imageUrl, String about,
                Collection<Contact> contacts) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.password = password;
        this.role = role;
        this.enabled = enabled;
        this.imageUrl = imageUrl;
        this.about = about;
        this.contacts = contacts;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public String getAbout() {
        return about;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public Collection<Contact> getContacts() {
        return contacts;
    }

    public void setContacts(Collection<Contact> contacts) {
        this.contacts = contacts;
    }

    @Override
    public String toString() {
        return "User[id = " + id + ", name = " + name + ", email = " + email + ", password = " + password + ", role = " +
               role + ", enabled = " + enabled + ", imageUrl = " + imageUrl + ", about = " + about + "]";
    }
}
